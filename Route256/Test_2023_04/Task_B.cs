using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestConsole.Codeforces.Contest_2023_04
{
    public class Task_B
    {
        public static void MainB(string[] args)
        {
            var testCaseCount = int.Parse(Console.ReadLine());

            var soglasn = "bcdfghjklmnpqrstvwxz".ToCharArray();
            var glasn = "a, e, i, o, u".Split(", ");

            for (int i = 0; i < testCaseCount; i++)
            {
                var word = Console.ReadLine();
                var len = word.Length;

                switch (word.Substring(len - 2))
                {
                    case "sh":
                    case "ch":
                        Console.WriteLine(word + "es");
                        continue;
                }

                switch (word[len-1])
                {
                    case 's':
                    case 'x':
                    case 'z':
                        Console.WriteLine(word + "es");
                        continue;
                    case 'y':
                        if (soglasn.Contains(word[len - 2]))
                        {
                            Console.WriteLine(word.Substring(0, len - 1) + "ies");
                            continue;
                        }
                        Console.WriteLine(word + "s");
                        continue;
                    default:
                        Console.WriteLine(word + "s");
                        continue;
                }
            }
        }
    }
}
/*
 B. Множественное число (10 баллов)
ограничение по времени на тест2 секунды
ограничение по памяти на тест512 мегабайт
вводстандартный ввод
выводстандартный вывод
Перед вами самая простая задача контеста. Если вы решали задачи Песочницы, то вы без проблем с ней справитесь.

Напомним некоторые требования и рекомендации к решениям.

Правильные решения задач должны проходить все заранее заготовленные тесты жюри и укладываться в ограничения по времени/памяти на каждом тесте. Ниже перечислены основные технические требования к решениям:

Решение располагается в одном файле исходного кода.
Решение читает входные данные со стандартного ввода (клавиатуры).
Решение пишет выходные данные на стандартный вывод (экран).
Решение не взаимодействует как-либо с другими ресурсами компьютера (сеть, жесткий диск, процессы и прочее).
Решение использует только стандартную библиотеку языка.
Решение располагается в пакете по умолчанию (или его аналоге для вашего языка), имеют стандартную точку входа для консольных программ.
Гарантируется, что во всех тестах выполняются все ограничения, что содержатся в условии задачи — как-либо проверять входные данные на корректность не надо, все тесты строго соответствуют описанному в задаче формату.
Выводите ответ в точности в том формате, как написано в условии задачи (не надо выводить «поясняющих» комментариев типа введите число или ответ равен).
Решения можно отправлять сколько угодно раз (пожалуйста, только без абьюза системы).
Для решений на Go считывать данные рекомендуется, используя bufio.NewReader(os.Stdin). Иначе при больших входных данных могут быть проблемы с каким-то внутренним буфером в Go и данные не будут вычитаны полностью или чтение будет происходить очень медленно. Например, зачастую можно делать вот так: in := bufio.NewReader(os.Stdin) и потом fmt.Fscan(in, &T). Аналогично с выводом. Следует использовать out := bufio.NewWriter(os.Stdout) (не забывайте про defer out.Flush()). А вот если делать просто fmt.Scan(&t) или fmt.Println(...), то при больших входных/выходных данных могут быть проблемы.
На C# можно просто использовать Console.ReadLine() и Console.Write(...)/Console.WriteLine(...) для ввода-вывода.
Для вашего удобства почти все тесты, на которых будут тестироваться ваши решения, являются открытыми. В каждой задаче можно скачать архив тестов (смотрите сайдбар справа, раздел «Материалы соревнования»). Если тест отсутствует в архиве, то он является закрытым.

Для наилучшего воспроизведения процесса тестирования локально, вы можете скомпилировать вашу программу в исполняемый файл и запустить из консоли, перенаправив её ввод-вывод (примерно так: a.exe < 01 > 01.out или ./a < 01 > 01.out).

Кроме того в сайдбаре справа в архиве присутствуют решения к задаче Сумматор из Песочницы на C# и Go.

Перейдём к задаче.

Эта задача содержит набор правил, которые не являются точными правилами английского языка, а лишь напоминают их. Пожалуйста, внимательно прочтите условие, даже если вы хорошо знакомы с соответствующими правилами в английском. Используйте текст условия как формальное техническое задание.

Будем считать, что согласные буквы английского языка — это буквы b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, z (всего 20 букв), а гласные — это буквы a, e, i, o, u (всего 5 букв). Букву y будем считать особенной, она не является ни гласной, ни согласной.

В английском языке множественное число для существительного образуется добавлением буквы s (например, cat →
 cats), но есть исключения:

если, слово заканчивается на s, sh, ch, x или z, то добавлять надо не s, а es (например, tax →
 taxes);
если, слово заканчивается на y и предпоследняя буква является согласной, то последняя буква y заменяется на ies (например, city →
 cities).
Вам задан набор существительных в единственном числе. Напишите программу, которая преобразует каждое слово во множественное число, формально следуя правилам выше.

Входные данные
В первой строке записано целое число t
 (1≤t≤1000
) — количество заданных слов.

Далее следуют t
 строк, каждая содержит слово, которое надо преобразовать во множественное число.

Гарантируется, что длина каждого заданного слова — от 2
 до 12
 букв, включительно. Слова состоят исключительно из строчных букв английского алфавита.

Выходные данные
Выведите t
 строк. Каждая строка должна содержать соответствующее слово из входных данных во множественном числе.

Пример
входные данныеСкопировать
12
cat
tax
city
roof
chief
bus
blitz
marsh
house
puppy
counterpunch
array
выходные данныеСкопировать
cats
taxes
cities
roofs
chiefs
buses
blitzes
marshes
houses
puppies
counterpunches
arrays

 */