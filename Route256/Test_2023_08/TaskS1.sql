/*
S1. Транспортировка easy (15 баллов)
ограничение по времени на тест15 секунд
ограничение по памяти на тест1024 мегабайта
вводстандартный ввод
выводстандартный вывод
Это необычная задача — вам надо написать SQL-запрос. В качестве решения вы должны отослать один запрос к базе данных, который возвращает требуемые данные. Запрос может содержать произвольное количество подзапросов, других конструкций, быть сколь угодно навороченным, но это должен быть один запрос (в нём не должна встречаться точка с запятой для разделения разных запросов).

При проверке вашего решения используется PostgreSQL 15.1. В качестве входных данных вам предоставляется дамп состояния базы данных. Обратите внимание, что время работы вашего решения на тесте включает восстановление состояния базы данных из дампа, но это время значительно меньше ограничения по времени. Вы можете использовать сторонний сервис http://sqlfiddle.com/ как инструмент для запуска запросов.

В этой задаче вам предстоит написать запрос к базе данных перемещений посылок между фулфилментами.

Фулфилмент — это склад, на который и от которого могут доставлять посылки.

Напишите запрос к базе данных, который возвращает информацию про время хранения посылок на фулфилментах:

идентификатор фулфилмента — соответствующую колонку в выводе следует назвать fulfilment_id;
название фулфилмента — соответствующую колонку в выводе следует назвать fulfilment_name;
идентификатор посылки — соответствующую колонку в выводе следует назвать package_id;
имя посылки — соответствующую колонку в выводе следует назвать package_name;
время прибытия посылки в фулфилмент — соответствующую колонку в выводе следует назвать time_in;
время отбытия посылки из фулфилмента — соответствующую колонку в выводе следует назвать time_out;
время хранения посылки в фулфилменте (т.е. время, прошедшее от прибытия на фулфилмент до отбытия из фулфилмента) — соответствующую колонку в выводе следует назвать storage_time.
Строки в выводе сортируйте в первую очередь по невозрастанию storage_time, затем по возрастанию time_in, затем по возрастанию fulfilment_id, затем по возрастанию package_id.
Внимательно ознакомьтесь с примерами вывода. Ваш запрос должен иметь в точности такой же вывод, как на примерах. Схема базы данных содержит четыре таблицы:

transportations — перемещения посылок между фулфилментами (описываются полями: id (идентификатор транспортировки), package_id (идентификатор посылки), source_id (идентификатор фулфилмента, из которого отправляется посылка), destination_id (идентификатор фулфилмента, на который приходит посылка), departure_time (время отправки посылки из фулфилмента source_id), arrival_time (время прибытия посылки в фулфилмент destination_id));
packages — посылки (описываются двумя полями: id и name),
fulfilments — фулфилменты (описываются двумя полями: id и name).
Таким образом, packages и transportations находятся в отношении «один ко многим», fulfilments и transportations находятся в отношении «многие к одному».

Известно, что любая посылка находилась в любом фулфилменте не более одного раза.

Изучите входные данные примера, чтобы подробно ознакомиться со схемой базы данных. Диаграмма выше иллюстрирует схему базы данных.

Входные данные
Входными данными в этой задаче является дамп базы данных. Вам он может быть полезен для ознакомления с состоянием базы данных для конкретного теста. В качестве решения вы должны отправить один SQL-запрос.

Выходные данные
Внимательно ознакомьтесь с примерами вывода. Ваш запрос должен иметь в точности такой же вывод, как на примерах.

Пример
входные данныеСкопировать
create table packages
(
    id   bigint primary key,
    name text not null
);

create table fulfilments
(
    id   bigint primary key,
    name text not null
);

create table transportations
(
    id             bigint primary key,
    package_id     bigint    not null,
    source_id      bigint    not null,
    destination_id bigint    not null,
    departure_time timestamp not null,
    arrival_time   timestamp not null,
    constraint fk_transportations_package_id foreign key (package_id) references packages (id),
    constraint fk_transportations_source_id foreign key (source_id) references fulfilments (id),
    constraint fk_transportations_destination_id foreign key (destination_id) references fulfilments (id)
);

insert into packages
values (1, 'Package slow'),
       (2, 'Package fast'),
       (3, 'Package strange');

insert into fulfilments
values (1, 'Moscow'),
       (2, 'Spb'),
       (3, 'Almaty'),
       (4, 'Novosibirsk'),
       (5, 'Vladivostok');

insert into transportations
values (1, 1, 1, 3, '2023-01-01 12:00:00', '2023-01-13 12:00:00'),
       (2, 1, 3, 5, '2023-01-15 12:00:00', '2023-01-31 12:00:00'),
       (3, 1, 5, 2, '2023-02-27 12:00:00', '2023-03-14 12:00:00'),
       (4, 1, 2, 4, '2023-03-15 12:00:00', '2023-03-28 12:00:00'),
       (5, 2, 1, 2, '2023-02-15 12:00:00', '2023-02-15 18:00:00'),
       (6, 3, 2, 3, '2023-04-02 12:00:00', '2023-04-05 12:00:00'),
       (7, 3, 3, 5, '2023-04-07 12:00:00', '2023-04-28 12:00:00');
выходные данныеСкопировать
 fulfilment_id | fulfilment_name | package_id |  package_name   |       time_in       |      time_out       | storage_time 
---------------+-----------------+------------+-----------------+---------------------+---------------------+--------------
             5 | Vladivostok     |          1 | Package slow    | 2023-01-31 12:00:00 | 2023-02-27 12:00:00 | 27 days
             3 | Almaty          |          1 | Package slow    | 2023-01-13 12:00:00 | 2023-01-15 12:00:00 | 2 days
             3 | Almaty          |          3 | Package strange | 2023-04-05 12:00:00 | 2023-04-07 12:00:00 | 2 days
             2 | Spb             |          1 | Package slow    | 2023-03-14 12:00:00 | 2023-03-15 12:00:00 | 1 day
(4 rows)
Примечание
Разберем пример из условия.

Посылка 1 (Package slow) с 2023-01-13 12:00:00 до 2023-01-15 12:00:00 находилась в фулфилменте 3; с 2023-01-31 12:00:00 до 2023-02-27 12:00:00 находилась в фулфилменте 5; с 2023-03-14 12:00:00 до 2023-03-15 12:00:00 находилась в фулфилменте 2.

Посылка 3 (Package strange) с 2023-04-05 12:00:00 до 2023-04-07 12:00:00 находилась в фулфилменте 3.


*/